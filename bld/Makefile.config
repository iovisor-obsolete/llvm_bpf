#===-- Makefile.config - Local configuration for LLVM ------*- Makefile -*--===#
#
# This file is distributed under the University of Illinois Open Source
# License. See LICENSE.TXT for details.
#
# This file is included by Makefile.common.  It defines paths and other
# values specific to a particular installation of LLVM.
#

# Directory Configuration
#	This section of the Makefile determines what is where.  To be
#	specific, there are several locations that need to be defined:
#
#	o LLVM_SRC_ROOT  : The root directory of the LLVM source code.
#	o LLVM_OBJ_ROOT  : The root directory containing the built LLVM code.
#
#	o PROJ_SRC_DIR  : The directory containing the code to build.
#	o PROJ_SRC_ROOT : The root directory of the code to build.
#
#	o PROJ_OBJ_DIR  : The directory in which compiled code will be placed.
#	o PROJ_OBJ_ROOT : The root directory in which compiled code is placed.

PWD := /bin/pwd

# The macro below is expanded when 'realpath' is not built-in.
# Built-in 'realpath' is available on GNU Make 3.81.
realpath = $(shell cd $(1); $(PWD))

PROJ_OBJ_DIR  := $(call realpath, .)
PROJ_OBJ_ROOT := $(call realpath, $(PROJ_OBJ_DIR)/$(LEVEL))

LLVM_SRC_ROOT   := $(call realpath, $(PROJ_OBJ_DIR)/$(LEVEL)/..)
LLVM_OBJ_ROOT   := $(call realpath, $(PROJ_OBJ_DIR)/$(LEVEL))
PROJ_SRC_ROOT   := $(LLVM_SRC_ROOT)
PROJ_SRC_DIR    := $(LLVM_SRC_ROOT)$(patsubst $(PROJ_OBJ_ROOT)%,%,$(PROJ_OBJ_DIR))

prefix          := /usr/local
PROJ_prefix     := $(prefix)
program_prefix  := 

PROJ_bindir     := $(PROJ_prefix)/bin

# Extra options to compile LLVM with
EXTRA_OPTIONS=

# Extra options to link LLVM with
EXTRA_LD_OPTIONS=

# Path to the C++ compiler to use.  This is an optional setting, which defaults
# to whatever your gmake defaults to.
CXX = g++

# Path to the CC binary, which use used by testcases for native builds.
CC := gcc

# Linker flags.
LDFLAGS+=

# Path to the library archiver program.
AR_PATH = ar
AR = ar

# The pathnames of the programs we require to build
CMP        := /usr/bin/cmp
CP         := /bin/cp
DATE       := /bin/date
INSTALL    := /usr/bin/install -c
MKDIR      := mkdir -p
MV         := /bin/mv
RANLIB     := ranlib
RM         := /bin/rm

LIBS       := -lncurses -lpthread -ldl -lm

# Targets that we should build
TARGETS_TO_BUILD=BPF 

# What to pass as rpath flag to g++
RPATH := -Wl,-R

# What to pass as -rdynamic flag to g++
RDYNAMIC := -Wl,-export-dynamic

# When ENABLE_WERROR is enabled, we'll pass -Werror on the command line
ENABLE_WERROR = 0

# When ENABLE_OPTIMIZED is enabled, LLVM code is optimized and output is put
# into the "Release" directories. Otherwise, LLVM code is not optimized and
# output is put in the "Debug" directories.
#ENABLE_OPTIMIZED = 1

# When DISABLE_ASSERTIONS is enabled, builds of all of the LLVM code will
# exclude assertion checks, otherwise they are included.
#DISABLE_ASSERTIONS = 1

# When DEBUG_SYMBOLS is enabled, the compiler libraries will retain debug
# symbols.
#DEBUG_SYMBOLS = 1

# When KEEP_SYMBOLS is enabled, installed executables will never have their
# symbols stripped.
#KEEP_SYMBOLS = 1

# The compiler flags to use for optimized builds.
OPTIMIZE_OPTION := -O3

# Use -fvisibility-inlines-hidden?
ENABLE_VISIBILITY_INLINES_HIDDEN := 1

# This option tells the Makefiles to produce verbose output.
# It essentially prints the commands that make is executing
#VERBOSE = 1

# Shared library extension for host platform.
SHLIBEXT = .so

# Executable file extension for host platform.
EXEEXT = 

# Things we just assume are "there"
ECHO := echo

SYSPATH = $(1)

